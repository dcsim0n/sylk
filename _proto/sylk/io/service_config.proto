// Copyright 2023 Sylk.  All rights reserved.

syntax = "proto3";

package sylk.io;

import "google/rpc/code.proto";

option go_package = "github.com/sylk-build/sylk-io/types/service_config;service_config";

message ServiceConfig {
    string load_balancing_policy = 1;
    repeated MethodConfig method_config = 2;
}

message MethodConfig {

    message MethodPath {
        string service = 1;
        string method = 2;
    }
    MethodPath name = 1;

    message RetryPolicy {
        // The maximum number of RPC attempts, including the original RPC.
        // This field is required and must be two or greater.
        int32 max_attempts = 1;

        // Exponential backoff parameters. The initial retry attempt will occur at
        // random(0, initialBackoff). In general, the nth attempt since the last
        // server pushback response (if any), will occur at random(0,
        //   min(initialBackoff*backoffMultiplier**(n-1), maxBackoff)).
        // The following two fields take their form from:
        // https://developers.google.com/protocol-buffers/docs/proto3#json
        // They are representations of the proto3 Duration type. Note that the
        // numeric portion of the string must be a valid JSON number.
        // They both must be greater than zero.
        string initial_backoff = 2;  // Required. Long decimal with "s" appended
        string max_backoff = 3;  // Required. Long decimal with "s" appended
        double backoff_multiplier = 4;  // Required. Must be greater than zero.

        // The set of status codes which may be retried.
        //
        // Status codes are specified in the integer form or the case-insensitive
        // string form (eg. [14], ["UNAVAILABLE"] or ["unavailable"])
        //
        // This field is required and must be non-empty.
        repeated google.rpc.Code retryable_status_codes = 5;
    }
    RetryPolicy retry_policy = 2;
    bool wait_for_ready = 3;
    string timeout = 4;
    int32 max_request_message_bytes = 5;
    int32 max_response_message_bytes = 6;

    // If a RetryThrottlingPolicy is provided, gRPC will automatically throttle
    // retry attempts and hedged RPCs when the clientâ€™s ratio of failures to
    // successes exceeds a threshold.
    //
    // For each server name, the gRPC client will maintain a token_count which is
    // initially set to maxTokens, and can take values between 0 and maxTokens.
    //
    // Every outgoing RPC (regardless of service or method invoked) will change
    // token_count as follows:
    //
    //   - Every failed RPC will decrement the token_count by 1.
    //   - Every successful RPC will increment the token_count by tokenRatio.
    //
    // If token_count is less than or equal to maxTokens / 2, then RPCs will not
    // be retried and hedged RPCs will not be sent.
    message RetryThrottling {
        // The number of tokens starts at maxTokens. The token_count will always be
        // between 0 and maxTokens.
        //
        // This field is required and must be in the range (0, 1000].  Up to 3
        // decimal places are supported
        double max_tokens = 1;

        // The amount of tokens to add on each successful RPC. Typically this will
        // be some number between 0 and 1, e.g., 0.1.
        //
        // This field is required and must be greater than zero. Up to 3 decimal
        // places are supported.
        double token_ratio = 2;

    }
    RetryThrottling retry_throttling = 7;
}
