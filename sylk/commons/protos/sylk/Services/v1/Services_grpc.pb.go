// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: sylk/Services/v1/Services.proto

package v1

import (
	context "context"
	v1 "github.com/sylk-build/sylk-core/services/protos/sylk/SylkApi/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesClient is the client API for Services service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesClient interface {
	// [sylk] - None
	CreateService(ctx context.Context, in *v1.CreateServiceRequest, opts ...grpc.CallOption) (*v1.CreateServiceResponse, error)
	// [sylk] - None
	GetService(ctx context.Context, in *v1.GetServiceRequest, opts ...grpc.CallOption) (*v1.GetServiceResponse, error)
	// [sylk] - None
	UpdateService(ctx context.Context, in *v1.UpdateServiceRequest, opts ...grpc.CallOption) (*v1.UpdateServiceResponse, error)
	// [sylk] - None
	ListServices(ctx context.Context, in *v1.ListServicesRequest, opts ...grpc.CallOption) (Services_ListServicesClient, error)
	// [sylk] - None
	DeleteService(ctx context.Context, in *v1.DeleteServiceRequest, opts ...grpc.CallOption) (*v1.DeleteServiceResponse, error)
}

type servicesClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesClient(cc grpc.ClientConnInterface) ServicesClient {
	return &servicesClient{cc}
}

func (c *servicesClient) CreateService(ctx context.Context, in *v1.CreateServiceRequest, opts ...grpc.CallOption) (*v1.CreateServiceResponse, error) {
	out := new(v1.CreateServiceResponse)
	err := c.cc.Invoke(ctx, "/Services/CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) GetService(ctx context.Context, in *v1.GetServiceRequest, opts ...grpc.CallOption) (*v1.GetServiceResponse, error) {
	out := new(v1.GetServiceResponse)
	err := c.cc.Invoke(ctx, "/Services/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) UpdateService(ctx context.Context, in *v1.UpdateServiceRequest, opts ...grpc.CallOption) (*v1.UpdateServiceResponse, error) {
	out := new(v1.UpdateServiceResponse)
	err := c.cc.Invoke(ctx, "/Services/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesClient) ListServices(ctx context.Context, in *v1.ListServicesRequest, opts ...grpc.CallOption) (Services_ListServicesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Services_ServiceDesc.Streams[0], "/Services/ListServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &servicesListServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Services_ListServicesClient interface {
	Recv() (*v1.GetServiceResponse, error)
	grpc.ClientStream
}

type servicesListServicesClient struct {
	grpc.ClientStream
}

func (x *servicesListServicesClient) Recv() (*v1.GetServiceResponse, error) {
	m := new(v1.GetServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *servicesClient) DeleteService(ctx context.Context, in *v1.DeleteServiceRequest, opts ...grpc.CallOption) (*v1.DeleteServiceResponse, error) {
	out := new(v1.DeleteServiceResponse)
	err := c.cc.Invoke(ctx, "/Services/DeleteService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesServer is the server API for Services service.
// All implementations must embed UnimplementedServicesServer
// for forward compatibility
type ServicesServer interface {
	// [sylk] - None
	CreateService(context.Context, *v1.CreateServiceRequest) (*v1.CreateServiceResponse, error)
	// [sylk] - None
	GetService(context.Context, *v1.GetServiceRequest) (*v1.GetServiceResponse, error)
	// [sylk] - None
	UpdateService(context.Context, *v1.UpdateServiceRequest) (*v1.UpdateServiceResponse, error)
	// [sylk] - None
	ListServices(*v1.ListServicesRequest, Services_ListServicesServer) error
	// [sylk] - None
	DeleteService(context.Context, *v1.DeleteServiceRequest) (*v1.DeleteServiceResponse, error)
	mustEmbedUnimplementedServicesServer()
}

// UnimplementedServicesServer must be embedded to have forward compatible implementations.
type UnimplementedServicesServer struct {
}

func (UnimplementedServicesServer) CreateService(context.Context, *v1.CreateServiceRequest) (*v1.CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedServicesServer) GetService(context.Context, *v1.GetServiceRequest) (*v1.GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedServicesServer) UpdateService(context.Context, *v1.UpdateServiceRequest) (*v1.UpdateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (UnimplementedServicesServer) ListServices(*v1.ListServicesRequest, Services_ListServicesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServicesServer) DeleteService(context.Context, *v1.DeleteServiceRequest) (*v1.DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedServicesServer) mustEmbedUnimplementedServicesServer() {}

// UnsafeServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesServer will
// result in compilation errors.
type UnsafeServicesServer interface {
	mustEmbedUnimplementedServicesServer()
}

func RegisterServicesServer(s grpc.ServiceRegistrar, srv ServicesServer) {
	s.RegisterService(&Services_ServiceDesc, srv)
}

func _Services_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services/CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).CreateService(ctx, req.(*v1.CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).GetService(ctx, req.(*v1.GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).UpdateService(ctx, req.(*v1.UpdateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Services_ListServices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServicesServer).ListServices(m, &servicesListServicesServer{stream})
}

type Services_ListServicesServer interface {
	Send(*v1.GetServiceResponse) error
	grpc.ServerStream
}

type servicesListServicesServer struct {
	grpc.ServerStream
}

func (x *servicesListServicesServer) Send(m *v1.GetServiceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Services_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Services/DeleteService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesServer).DeleteService(ctx, req.(*v1.DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Services_ServiceDesc is the grpc.ServiceDesc for Services service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Services_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Services",
	HandlerType: (*ServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateService",
			Handler:    _Services_CreateService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Services_GetService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _Services_UpdateService_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _Services_DeleteService_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListServices",
			Handler:       _Services_ListServices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sylk/Services/v1/Services.proto",
}
