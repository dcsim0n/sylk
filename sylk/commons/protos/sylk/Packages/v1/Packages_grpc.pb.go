// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: sylk/Packages/v1/Packages.proto

package v1

import (
	context "context"
	v1 "github.com/sylk-build/sylk-core/services/protos/sylk/SylkApi/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackagesClient is the client API for Packages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesClient interface {
	// [sylk] - None
	GetPackage(ctx context.Context, in *v1.GetPackageRequest, opts ...grpc.CallOption) (*v1.GetPackageResponse, error)
	// [sylk] - None
	CreatePackage(ctx context.Context, in *v1.CreatePackageRequest, opts ...grpc.CallOption) (*v1.CreatePackageResponse, error)
	// [sylk] - None
	DeletePackage(ctx context.Context, in *v1.DeletePackageRequest, opts ...grpc.CallOption) (*v1.DeletePackageResponse, error)
	// [sylk] - None
	UpdatePackage(ctx context.Context, in *v1.UpdatePackageRequest, opts ...grpc.CallOption) (*v1.UpdatePackageResponse, error)
	// [sylk] - None
	ListPackages(ctx context.Context, in *v1.ListPackagesRequest, opts ...grpc.CallOption) (Packages_ListPackagesClient, error)
}

type packagesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesClient(cc grpc.ClientConnInterface) PackagesClient {
	return &packagesClient{cc}
}

func (c *packagesClient) GetPackage(ctx context.Context, in *v1.GetPackageRequest, opts ...grpc.CallOption) (*v1.GetPackageResponse, error) {
	out := new(v1.GetPackageResponse)
	err := c.cc.Invoke(ctx, "/Packages/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) CreatePackage(ctx context.Context, in *v1.CreatePackageRequest, opts ...grpc.CallOption) (*v1.CreatePackageResponse, error) {
	out := new(v1.CreatePackageResponse)
	err := c.cc.Invoke(ctx, "/Packages/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) DeletePackage(ctx context.Context, in *v1.DeletePackageRequest, opts ...grpc.CallOption) (*v1.DeletePackageResponse, error) {
	out := new(v1.DeletePackageResponse)
	err := c.cc.Invoke(ctx, "/Packages/DeletePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) UpdatePackage(ctx context.Context, in *v1.UpdatePackageRequest, opts ...grpc.CallOption) (*v1.UpdatePackageResponse, error) {
	out := new(v1.UpdatePackageResponse)
	err := c.cc.Invoke(ctx, "/Packages/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packagesClient) ListPackages(ctx context.Context, in *v1.ListPackagesRequest, opts ...grpc.CallOption) (Packages_ListPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Packages_ServiceDesc.Streams[0], "/Packages/ListPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &packagesListPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Packages_ListPackagesClient interface {
	Recv() (*v1.GetPackageResponse, error)
	grpc.ClientStream
}

type packagesListPackagesClient struct {
	grpc.ClientStream
}

func (x *packagesListPackagesClient) Recv() (*v1.GetPackageResponse, error) {
	m := new(v1.GetPackageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackagesServer is the server API for Packages service.
// All implementations must embed UnimplementedPackagesServer
// for forward compatibility
type PackagesServer interface {
	// [sylk] - None
	GetPackage(context.Context, *v1.GetPackageRequest) (*v1.GetPackageResponse, error)
	// [sylk] - None
	CreatePackage(context.Context, *v1.CreatePackageRequest) (*v1.CreatePackageResponse, error)
	// [sylk] - None
	DeletePackage(context.Context, *v1.DeletePackageRequest) (*v1.DeletePackageResponse, error)
	// [sylk] - None
	UpdatePackage(context.Context, *v1.UpdatePackageRequest) (*v1.UpdatePackageResponse, error)
	// [sylk] - None
	ListPackages(*v1.ListPackagesRequest, Packages_ListPackagesServer) error
	mustEmbedUnimplementedPackagesServer()
}

// UnimplementedPackagesServer must be embedded to have forward compatible implementations.
type UnimplementedPackagesServer struct {
}

func (UnimplementedPackagesServer) GetPackage(context.Context, *v1.GetPackageRequest) (*v1.GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPackagesServer) CreatePackage(context.Context, *v1.CreatePackageRequest) (*v1.CreatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPackagesServer) DeletePackage(context.Context, *v1.DeletePackageRequest) (*v1.DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedPackagesServer) UpdatePackage(context.Context, *v1.UpdatePackageRequest) (*v1.UpdatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedPackagesServer) ListPackages(*v1.ListPackagesRequest, Packages_ListPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPackagesServer) mustEmbedUnimplementedPackagesServer() {}

// UnsafePackagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServer will
// result in compilation errors.
type UnsafePackagesServer interface {
	mustEmbedUnimplementedPackagesServer()
}

func RegisterPackagesServer(s grpc.ServiceRegistrar, srv PackagesServer) {
	s.RegisterService(&Packages_ServiceDesc, srv)
}

func _Packages_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).GetPackage(ctx, req.(*v1.GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).CreatePackage(ctx, req.(*v1.CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeletePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages/DeletePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).DeletePackage(ctx, req.(*v1.DeletePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackagesServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Packages/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackagesServer).UpdatePackage(ctx, req.(*v1.UpdatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Packages_ListPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListPackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackagesServer).ListPackages(m, &packagesListPackagesServer{stream})
}

type Packages_ListPackagesServer interface {
	Send(*v1.GetPackageResponse) error
	grpc.ServerStream
}

type packagesListPackagesServer struct {
	grpc.ServerStream
}

func (x *packagesListPackagesServer) Send(m *v1.GetPackageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Packages_ServiceDesc is the grpc.ServiceDesc for Packages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Packages",
	HandlerType: (*PackagesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackage",
			Handler:    _Packages_GetPackage_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _Packages_CreatePackage_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _Packages_DeletePackage_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _Packages_UpdatePackage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPackages",
			Handler:       _Packages_ListPackages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sylk/Packages/v1/Packages.proto",
}
