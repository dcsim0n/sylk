// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: sylk/Users/v1/Users.proto

package v1

import (
	context "context"
	v1 "github.com/sylk-build/sylk-core/services/protos/sylk/SylkApi/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersClient is the client API for Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersClient interface {
	// [sylk] - None
	CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserResponse, error)
	// [sylk] - None
	GetAccessToken(ctx context.Context, in *v1.GetAccessTokenRequest, opts ...grpc.CallOption) (*v1.GetAccessTokenResponse, error)
	// [sylk] - None
	CreateAccessToken(ctx context.Context, in *v1.CreateAccessTokenRequest, opts ...grpc.CallOption) (*v1.CreateAccessTokenResponse, error)
	// [sylk] - None
	GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...grpc.CallOption) (*v1.GetUserResponse, error)
	// [sylk] - None
	ListAccessTokens(ctx context.Context, in *v1.ListAccessTokensRequest, opts ...grpc.CallOption) (Users_ListAccessTokensClient, error)
	// [sylk] - None
	RevokeAccessToken(ctx context.Context, in *v1.RevokeAccessTokenRequest, opts ...grpc.CallOption) (*v1.RevokeAccessTokenResponse, error)
	// [sylk] - None
	UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, opts ...grpc.CallOption) (*v1.UpdateUserResponse, error)
}

type usersClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersClient(cc grpc.ClientConnInterface) UsersClient {
	return &usersClient{cc}
}

func (c *usersClient) CreateUser(ctx context.Context, in *v1.CreateUserRequest, opts ...grpc.CallOption) (*v1.CreateUserResponse, error) {
	out := new(v1.CreateUserResponse)
	err := c.cc.Invoke(ctx, "/Users/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetAccessToken(ctx context.Context, in *v1.GetAccessTokenRequest, opts ...grpc.CallOption) (*v1.GetAccessTokenResponse, error) {
	out := new(v1.GetAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/Users/GetAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) CreateAccessToken(ctx context.Context, in *v1.CreateAccessTokenRequest, opts ...grpc.CallOption) (*v1.CreateAccessTokenResponse, error) {
	out := new(v1.CreateAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/Users/CreateAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) GetUser(ctx context.Context, in *v1.GetUserRequest, opts ...grpc.CallOption) (*v1.GetUserResponse, error) {
	out := new(v1.GetUserResponse)
	err := c.cc.Invoke(ctx, "/Users/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) ListAccessTokens(ctx context.Context, in *v1.ListAccessTokensRequest, opts ...grpc.CallOption) (Users_ListAccessTokensClient, error) {
	stream, err := c.cc.NewStream(ctx, &Users_ServiceDesc.Streams[0], "/Users/ListAccessTokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &usersListAccessTokensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Users_ListAccessTokensClient interface {
	Recv() (*v1.GetAccessTokenResponse, error)
	grpc.ClientStream
}

type usersListAccessTokensClient struct {
	grpc.ClientStream
}

func (x *usersListAccessTokensClient) Recv() (*v1.GetAccessTokenResponse, error) {
	m := new(v1.GetAccessTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *usersClient) RevokeAccessToken(ctx context.Context, in *v1.RevokeAccessTokenRequest, opts ...grpc.CallOption) (*v1.RevokeAccessTokenResponse, error) {
	out := new(v1.RevokeAccessTokenResponse)
	err := c.cc.Invoke(ctx, "/Users/RevokeAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersClient) UpdateUser(ctx context.Context, in *v1.UpdateUserRequest, opts ...grpc.CallOption) (*v1.UpdateUserResponse, error) {
	out := new(v1.UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/Users/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServer is the server API for Users service.
// All implementations must embed UnimplementedUsersServer
// for forward compatibility
type UsersServer interface {
	// [sylk] - None
	CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserResponse, error)
	// [sylk] - None
	GetAccessToken(context.Context, *v1.GetAccessTokenRequest) (*v1.GetAccessTokenResponse, error)
	// [sylk] - None
	CreateAccessToken(context.Context, *v1.CreateAccessTokenRequest) (*v1.CreateAccessTokenResponse, error)
	// [sylk] - None
	GetUser(context.Context, *v1.GetUserRequest) (*v1.GetUserResponse, error)
	// [sylk] - None
	ListAccessTokens(*v1.ListAccessTokensRequest, Users_ListAccessTokensServer) error
	// [sylk] - None
	RevokeAccessToken(context.Context, *v1.RevokeAccessTokenRequest) (*v1.RevokeAccessTokenResponse, error)
	// [sylk] - None
	UpdateUser(context.Context, *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error)
	mustEmbedUnimplementedUsersServer()
}

// UnimplementedUsersServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServer struct {
}

func (UnimplementedUsersServer) CreateUser(context.Context, *v1.CreateUserRequest) (*v1.CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUsersServer) GetAccessToken(context.Context, *v1.GetAccessTokenRequest) (*v1.GetAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessToken not implemented")
}
func (UnimplementedUsersServer) CreateAccessToken(context.Context, *v1.CreateAccessTokenRequest) (*v1.CreateAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccessToken not implemented")
}
func (UnimplementedUsersServer) GetUser(context.Context, *v1.GetUserRequest) (*v1.GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUsersServer) ListAccessTokens(*v1.ListAccessTokensRequest, Users_ListAccessTokensServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAccessTokens not implemented")
}
func (UnimplementedUsersServer) RevokeAccessToken(context.Context, *v1.RevokeAccessTokenRequest) (*v1.RevokeAccessTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAccessToken not implemented")
}
func (UnimplementedUsersServer) UpdateUser(context.Context, *v1.UpdateUserRequest) (*v1.UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUsersServer) mustEmbedUnimplementedUsersServer() {}

// UnsafeUsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServer will
// result in compilation errors.
type UnsafeUsersServer interface {
	mustEmbedUnimplementedUsersServer()
}

func RegisterUsersServer(s grpc.ServiceRegistrar, srv UsersServer) {
	s.RegisterService(&Users_ServiceDesc, srv)
}

func _Users_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateUser(ctx, req.(*v1.CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/GetAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetAccessToken(ctx, req.(*v1.GetAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_CreateAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).CreateAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/CreateAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).CreateAccessToken(ctx, req.(*v1.CreateAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).GetUser(ctx, req.(*v1.GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_ListAccessTokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListAccessTokensRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UsersServer).ListAccessTokens(m, &usersListAccessTokensServer{stream})
}

type Users_ListAccessTokensServer interface {
	Send(*v1.GetAccessTokenResponse) error
	grpc.ServerStream
}

type usersListAccessTokensServer struct {
	grpc.ServerStream
}

func (x *usersListAccessTokensServer) Send(m *v1.GetAccessTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Users_RevokeAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RevokeAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).RevokeAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/RevokeAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).RevokeAccessToken(ctx, req.(*v1.RevokeAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Users_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Users/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServer).UpdateUser(ctx, req.(*v1.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Users_ServiceDesc is the grpc.ServiceDesc for Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Users",
	HandlerType: (*UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _Users_CreateUser_Handler,
		},
		{
			MethodName: "GetAccessToken",
			Handler:    _Users_GetAccessToken_Handler,
		},
		{
			MethodName: "CreateAccessToken",
			Handler:    _Users_CreateAccessToken_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Users_GetUser_Handler,
		},
		{
			MethodName: "RevokeAccessToken",
			Handler:    _Users_RevokeAccessToken_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Users_UpdateUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListAccessTokens",
			Handler:       _Users_ListAccessTokens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sylk/Users/v1/Users.proto",
}
