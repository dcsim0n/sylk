// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.1
// source: sylk/Projects/v1/Projects.proto

package v1

import (
	context "context"
	v1 "github.com/sylk-build/sylk-core/services/protos/sylk/SylkApi/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectsClient is the client API for Projects service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectsClient interface {
	// [sylk] - None
	UpdateUserRoleProject(ctx context.Context, in *v1.UpdateUserRoleRequest, opts ...grpc.CallOption) (*v1.UpdateUserRoleResponse, error)
	// [sylk] - None
	RemoveUserProject(ctx context.Context, in *v1.RemoveUserRequest, opts ...grpc.CallOption) (*v1.RemoveUserResponse, error)
	// [sylk] - None
	AddUserProject(ctx context.Context, in *v1.AddUserRequest, opts ...grpc.CallOption) (*v1.AddUserResponse, error)
	// [sylk] - None
	GetProject(ctx context.Context, in *v1.GetProjectRequest, opts ...grpc.CallOption) (*v1.GetProjectResponse, error)
	// [sylk] - None
	UpdateProject(ctx context.Context, in *v1.UpdateProjectRequest, opts ...grpc.CallOption) (*v1.UpdateProjectResponse, error)
	// [sylk] - None
	CreateProject(ctx context.Context, in *v1.CreateProjectRequest, opts ...grpc.CallOption) (*v1.CreateProjectResponse, error)
	// [sylk] - None
	DeleteProject(ctx context.Context, in *v1.DeleteProjectRequest, opts ...grpc.CallOption) (*v1.DeleteProjectResponse, error)
	// [sylk] - None
	ListProjects(ctx context.Context, in *v1.ListProjectsRequest, opts ...grpc.CallOption) (Projects_ListProjectsClient, error)
	// [sylk] - None
	UpdateUserStatusProject(ctx context.Context, in *v1.UpdateUserStatusRequest, opts ...grpc.CallOption) (*v1.UpdateUserStatusResponse, error)
}

type projectsClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectsClient(cc grpc.ClientConnInterface) ProjectsClient {
	return &projectsClient{cc}
}

func (c *projectsClient) UpdateUserRoleProject(ctx context.Context, in *v1.UpdateUserRoleRequest, opts ...grpc.CallOption) (*v1.UpdateUserRoleResponse, error) {
	out := new(v1.UpdateUserRoleResponse)
	err := c.cc.Invoke(ctx, "/Projects/UpdateUserRoleProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) RemoveUserProject(ctx context.Context, in *v1.RemoveUserRequest, opts ...grpc.CallOption) (*v1.RemoveUserResponse, error) {
	out := new(v1.RemoveUserResponse)
	err := c.cc.Invoke(ctx, "/Projects/RemoveUserProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) AddUserProject(ctx context.Context, in *v1.AddUserRequest, opts ...grpc.CallOption) (*v1.AddUserResponse, error) {
	out := new(v1.AddUserResponse)
	err := c.cc.Invoke(ctx, "/Projects/AddUserProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) GetProject(ctx context.Context, in *v1.GetProjectRequest, opts ...grpc.CallOption) (*v1.GetProjectResponse, error) {
	out := new(v1.GetProjectResponse)
	err := c.cc.Invoke(ctx, "/Projects/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) UpdateProject(ctx context.Context, in *v1.UpdateProjectRequest, opts ...grpc.CallOption) (*v1.UpdateProjectResponse, error) {
	out := new(v1.UpdateProjectResponse)
	err := c.cc.Invoke(ctx, "/Projects/UpdateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) CreateProject(ctx context.Context, in *v1.CreateProjectRequest, opts ...grpc.CallOption) (*v1.CreateProjectResponse, error) {
	out := new(v1.CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/Projects/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) DeleteProject(ctx context.Context, in *v1.DeleteProjectRequest, opts ...grpc.CallOption) (*v1.DeleteProjectResponse, error) {
	out := new(v1.DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/Projects/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectsClient) ListProjects(ctx context.Context, in *v1.ListProjectsRequest, opts ...grpc.CallOption) (Projects_ListProjectsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Projects_ServiceDesc.Streams[0], "/Projects/ListProjects", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectsListProjectsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Projects_ListProjectsClient interface {
	Recv() (*v1.GetProjectResponse, error)
	grpc.ClientStream
}

type projectsListProjectsClient struct {
	grpc.ClientStream
}

func (x *projectsListProjectsClient) Recv() (*v1.GetProjectResponse, error) {
	m := new(v1.GetProjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *projectsClient) UpdateUserStatusProject(ctx context.Context, in *v1.UpdateUserStatusRequest, opts ...grpc.CallOption) (*v1.UpdateUserStatusResponse, error) {
	out := new(v1.UpdateUserStatusResponse)
	err := c.cc.Invoke(ctx, "/Projects/UpdateUserStatusProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectsServer is the server API for Projects service.
// All implementations must embed UnimplementedProjectsServer
// for forward compatibility
type ProjectsServer interface {
	// [sylk] - None
	UpdateUserRoleProject(context.Context, *v1.UpdateUserRoleRequest) (*v1.UpdateUserRoleResponse, error)
	// [sylk] - None
	RemoveUserProject(context.Context, *v1.RemoveUserRequest) (*v1.RemoveUserResponse, error)
	// [sylk] - None
	AddUserProject(context.Context, *v1.AddUserRequest) (*v1.AddUserResponse, error)
	// [sylk] - None
	GetProject(context.Context, *v1.GetProjectRequest) (*v1.GetProjectResponse, error)
	// [sylk] - None
	UpdateProject(context.Context, *v1.UpdateProjectRequest) (*v1.UpdateProjectResponse, error)
	// [sylk] - None
	CreateProject(context.Context, *v1.CreateProjectRequest) (*v1.CreateProjectResponse, error)
	// [sylk] - None
	DeleteProject(context.Context, *v1.DeleteProjectRequest) (*v1.DeleteProjectResponse, error)
	// [sylk] - None
	ListProjects(*v1.ListProjectsRequest, Projects_ListProjectsServer) error
	// [sylk] - None
	UpdateUserStatusProject(context.Context, *v1.UpdateUserStatusRequest) (*v1.UpdateUserStatusResponse, error)
	mustEmbedUnimplementedProjectsServer()
}

// UnimplementedProjectsServer must be embedded to have forward compatible implementations.
type UnimplementedProjectsServer struct {
}

func (UnimplementedProjectsServer) UpdateUserRoleProject(context.Context, *v1.UpdateUserRoleRequest) (*v1.UpdateUserRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRoleProject not implemented")
}
func (UnimplementedProjectsServer) RemoveUserProject(context.Context, *v1.RemoveUserRequest) (*v1.RemoveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserProject not implemented")
}
func (UnimplementedProjectsServer) AddUserProject(context.Context, *v1.AddUserRequest) (*v1.AddUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserProject not implemented")
}
func (UnimplementedProjectsServer) GetProject(context.Context, *v1.GetProjectRequest) (*v1.GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectsServer) UpdateProject(context.Context, *v1.UpdateProjectRequest) (*v1.UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectsServer) CreateProject(context.Context, *v1.CreateProjectRequest) (*v1.CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectsServer) DeleteProject(context.Context, *v1.DeleteProjectRequest) (*v1.DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectsServer) ListProjects(*v1.ListProjectsRequest, Projects_ListProjectsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectsServer) UpdateUserStatusProject(context.Context, *v1.UpdateUserStatusRequest) (*v1.UpdateUserStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserStatusProject not implemented")
}
func (UnimplementedProjectsServer) mustEmbedUnimplementedProjectsServer() {}

// UnsafeProjectsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectsServer will
// result in compilation errors.
type UnsafeProjectsServer interface {
	mustEmbedUnimplementedProjectsServer()
}

func RegisterProjectsServer(s grpc.ServiceRegistrar, srv ProjectsServer) {
	s.RegisterService(&Projects_ServiceDesc, srv)
}

func _Projects_UpdateUserRoleProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).UpdateUserRoleProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/UpdateUserRoleProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).UpdateUserRoleProject(ctx, req.(*v1.UpdateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_RemoveUserProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.RemoveUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).RemoveUserProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/RemoveUserProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).RemoveUserProject(ctx, req.(*v1.RemoveUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_AddUserProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AddUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).AddUserProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/AddUserProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).AddUserProject(ctx, req.(*v1.AddUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).GetProject(ctx, req.(*v1.GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).UpdateProject(ctx, req.(*v1.UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).CreateProject(ctx, req.(*v1.CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).DeleteProject(ctx, req.(*v1.DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Projects_ListProjects_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.ListProjectsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectsServer).ListProjects(m, &projectsListProjectsServer{stream})
}

type Projects_ListProjectsServer interface {
	Send(*v1.GetProjectResponse) error
	grpc.ServerStream
}

type projectsListProjectsServer struct {
	grpc.ServerStream
}

func (x *projectsListProjectsServer) Send(m *v1.GetProjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Projects_UpdateUserStatusProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateUserStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectsServer).UpdateUserStatusProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Projects/UpdateUserStatusProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectsServer).UpdateUserStatusProject(ctx, req.(*v1.UpdateUserStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Projects_ServiceDesc is the grpc.ServiceDesc for Projects service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Projects_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Projects",
	HandlerType: (*ProjectsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserRoleProject",
			Handler:    _Projects_UpdateUserRoleProject_Handler,
		},
		{
			MethodName: "RemoveUserProject",
			Handler:    _Projects_RemoveUserProject_Handler,
		},
		{
			MethodName: "AddUserProject",
			Handler:    _Projects_AddUserProject_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _Projects_GetProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _Projects_UpdateProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _Projects_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _Projects_DeleteProject_Handler,
		},
		{
			MethodName: "UpdateUserStatusProject",
			Handler:    _Projects_UpdateUserStatusProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListProjects",
			Handler:       _Projects_ListProjects_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "sylk/Projects/v1/Projects.proto",
}
